package userinterface.animation.effectsimport math.Colorimport userinterface.MovableUIContainerimport userinterface.UIColorimport userinterface.UniversalParameters.ANIMATION_DURATIONimport userinterface.animation.Animationimport userinterface.animation.AnimationTypeimport userinterface.animation.ValueAnimationimport userinterface.animation.ValueTypeimport userinterface.items.Itemimport userinterface.items.backgrounds.ColoredBackgroundclass ColorEffect(private val changeToColor: Color, duration: Float = ANIMATION_DURATION) : Effect(duration) {        constructor(uiColor: UIColor, duration: Float = ANIMATION_DURATION) : this(uiColor.color, duration)        override fun applyOn(item: Item): ArrayList<Pair<MovableUIContainer, Animation>> {        return arrayListOf(Pair(item, ValueAnimation(duration, changeToColor, ValueType.COLOR, AnimationType.ADD_TO_CURRENT, (item.background as ColoredBackground).color)))    }        override fun removeFrom(item: Item): ArrayList<Pair<MovableUIContainer, Animation>> {        return arrayListOf(Pair(item, ValueAnimation(duration, -changeToColor, ValueType.COLOR, AnimationType.ADD_TO_CURRENT, (item.background as ColoredBackground).color)))    }}