package userinterface.itemsimport devices.Buttonimport devices.Keyimport devices.Keyboardimport devices.Mouseimport math.Colorimport math.vectors.Vector2import userinterface.UniversalParametersimport userinterface.items.backgrounds.Backgroundimport userinterface.layout.constraints.ConstraintDirectionimport userinterface.layout.constraints.ConstraintSetimport userinterface.layout.constraints.constrainttypes.AspectRatioConstraintimport userinterface.layout.constraints.constrainttypes.CenterConstraintimport userinterface.layout.constraints.constrainttypes.PixelConstraintimport userinterface.layout.constraints.constrainttypes.RelativeConstraintimport userinterface.text.AlignmentTypeimport userinterface.text.Charactersimport userinterface.text.TextAlignmentimport userinterface.text.font.Fontimport kotlin.math.absclass TextInputBox(id: String, constraints: ConstraintSet, textString: String, size: Float, alignment: TextAlignment = TextAlignment(AlignmentType.LEFT_ALIGNED), background: Background = UniversalParameters.TEXTBOX_BACKGROUND(), color: Color = UniversalParameters.TEXT_COLOR().color, font: Font = UniversalParameters.defaultFont) : TextLabel(id, constraints, textString, size, alignment, background, color, font) {        private val cursorBlinkSpeed = 1000    private var cursorBlinkCounter = 0f    private var selected = false        init {        add(Item("${id}_cursor", ConstraintSet(            CenterConstraint(ConstraintDirection.VERTICAL),            PixelConstraint(ConstraintDirection.TO_LEFT, 0.01f),            RelativeConstraint(ConstraintDirection.VERTICAL, 0.9f),            AspectRatioConstraint(ConstraintDirection.HORIZONTAL, 0.02f))        ))            getCursor().visible = false        allowChildToIgnoreBounds(getCursor().id)    }        fun getPoints() = text.getPoints()        private fun getCursor() = findById("${id}_cursor")!!        private fun showCursor() {        getCursor().visible = true    }        private fun hideCursor() {        getCursor().visible = false    }        override fun update(mouse: Mouse, keyboard: Keyboard, aspectRatio: Float, deltaTime: Float): Boolean {                if (mouse.isPressed(Button.LEFT) || mouse.isPressed(Button.RIGHT)) {            val clickPosition = isMouseOnButton(mouse, aspectRatio)            if (clickPosition == null) {                selected = false                                hideCursor()                return super.update(mouse, keyboard, aspectRatio, deltaTime)            }                        cursorBlinkCounter = 0f            selected = true                        val newCursorPosition = calculateCursorPosition(clickPosition, aspectRatio)            if (newCursorPosition != null) {                getCursor().setTranslation(newCursorPosition)            }        }                if (selected) {            updateCursorVisibility(deltaTime)            processKeyboardInput(keyboard, aspectRatio)        }                return super.update(mouse, keyboard, aspectRatio, deltaTime)    }        private fun processKeyboardInput(keyboard: Keyboard, aspectRatio: Float) {        if (keyboard.isPressed(Key.BACKSPACE)) {            if (!text.isBlank()) {                val selectedCharacterIndex = text.getCharacterInFrontOfCursor(getCursor().getTranslation().x, aspectRatio)                if (selectedCharacterIndex > 0) {                    if (selectedCharacterIndex == 1) {                        val newCursorPosition = calculateCursorPositionInFrontOfCharacter(0, aspectRatio)                        text.removeCharacter(0)                        getCursor().setTranslation(newCursorPosition)                    } else {                        text.removeCharacter(selectedCharacterIndex - 1)                        val newCursorPosition = calculateCursorPositionBehindCharacter(selectedCharacterIndex - 2, aspectRatio)                        getCursor().setTranslation(newCursorPosition)                    }                }            }        }                val pressedKeys = keyboard.getPressedKeys()        val heldKeys = keyboard.getHeldKeys()                for (key in pressedKeys) {            if (key == Key.UP) {                println(text.getCharacterInFrontOfCursor(getCursor().getTranslation().x, aspectRatio))            }            if (key == Key.LEFT) {                val selectedCharacterIndex = text.getCharacterInFrontOfCursor(getCursor().getTranslation().x, aspectRatio)                if (selectedCharacterIndex > 0) {                    val newCursorPosition = calculateCursorPositionInFrontOfCharacter(selectedCharacterIndex - 1, aspectRatio)                    getCursor().setTranslation(newCursorPosition)                }            }                        if (key == Key.RIGHT) {                val selectedCharacterIndex = text.getCharacterInFrontOfCursor(getCursor().getTranslation().x, aspectRatio)                if (selectedCharacterIndex < text.length()) {                    val newCursorPosition = calculateCursorPositionBehindCharacter(selectedCharacterIndex, aspectRatio)                    getCursor().setTranslation(newCursorPosition)                }            }                        if (key.isTextKey()) {                val selectedCharacterIndex = if (text.isBlank()) {                    0                } else {                    text.getCharacterInFrontOfCursor(getCursor().getTranslation().x, aspectRatio)                }                    val character = determineKeyCharacter(key, heldKeys)                if (character != null) {                    text.addCharacter(selectedCharacterIndex, character)                    val newCursorPosition = calculateCursorPositionBehindCharacter(selectedCharacterIndex, aspectRatio)                    getCursor().setTranslation(newCursorPosition)                }            }        }    }        private fun determineKeyCharacter(key: Key, heldKeys: Set<Key>): Char? {        for (character in Characters.values()) {            if (character.key == key) {                return if (heldKeys.contains(Key.LEFT_SHIFT) || heldKeys.contains(Key.RIGHT_SHIFT)) {                    character.alternativeCharacter                } else {                    character.mainCharacter                }            }        }        return null    }        private fun calculateCursorPositionBehindCharacter(characterIndex: Int, aspectRatio: Float): Vector2 {        val currentCursorTranslation = getCursor().getTranslation()        val characterXBounds = text.getCharacterXBounds(characterIndex)                if (characterIndex == text.length() - 1) {            return Vector2(characterXBounds.second * aspectRatio, currentCursorTranslation.y)        }                val nextCharacterBounds = text.getCharacterXBounds(characterIndex + 1)        val newX = (characterXBounds.second + nextCharacterBounds.first) / 2.0f        return Vector2(newX * aspectRatio, currentCursorTranslation.y)    }        private fun calculateCursorPositionInFrontOfCharacter(characterIndex: Int, aspectRatio: Float): Vector2 {        val currentCursorTranslation = getCursor().getTranslation()        val characterXBounds = text.getCharacterXBounds(characterIndex)            if (characterIndex == 0) {            return Vector2(characterXBounds.first * aspectRatio, currentCursorTranslation.y)        }                val previousCharacterBounds = text.getCharacterXBounds(characterIndex - 1)        val newX = (previousCharacterBounds.second + characterXBounds.first) / 2.0f        return Vector2(newX * aspectRatio, currentCursorTranslation.y)    }        private fun calculateCursorPosition(clickPosition: Vector2, aspectRatio: Float): Vector2? {        val selectedCharacterIndex = text.getSelectedCharacter(clickPosition.x)        if (selectedCharacterIndex == -1) {            return null        }                val characterXBounds = text.getCharacterXBounds(selectedCharacterIndex)        val leftSideSelected = abs(characterXBounds.first - clickPosition.x) < abs(characterXBounds.second - clickPosition.x)                val currentCursorTranslation = getCursor().getTranslation()            if (leftSideSelected && selectedCharacterIndex == 0) {            return Vector2(characterXBounds.first * aspectRatio, currentCursorTranslation.y)        }        if (!leftSideSelected && selectedCharacterIndex == text.length() - 1) {            return Vector2(characterXBounds.second * aspectRatio, currentCursorTranslation.y)        }            return if (leftSideSelected) {            val previousCharacterBounds = text.getCharacterXBounds(selectedCharacterIndex - 1)            val newX = (previousCharacterBounds.second + characterXBounds.first) / 2.0f                Vector2(newX * aspectRatio, currentCursorTranslation.y)        } else {            val nextCharacterBounds = text.getCharacterXBounds(selectedCharacterIndex + 1)            val newX = (nextCharacterBounds.first + characterXBounds.second) / 2.0f                Vector2(newX * aspectRatio, currentCursorTranslation.y)        }    }      private fun updateCursorVisibility(deltaTime: Float) {        cursorBlinkCounter += deltaTime * 1000        if (cursorBlinkCounter < cursorBlinkSpeed / 2) {            showCursor()        } else if (cursorBlinkCounter < cursorBlinkSpeed) {            hideCursor()        } else {            cursorBlinkCounter = 0f        }    }        private fun isMouseOnButton(mouse: Mouse, aspectRatio: Float): Vector2? {        val minX = (getTranslation().x - getScale().x) / aspectRatio        val maxX = (getTranslation().x + getScale().x) / aspectRatio        val minY = getTranslation().y - getScale().y        val maxY = getTranslation().y + getScale().y                val scaledMouseX = mouse.x * 2.0f        val scaledMouseY = mouse.y * 2.0f                if (scaledMouseX < minX || scaledMouseX > maxX) {            return null        }        if (scaledMouseY < minY || scaledMouseY > maxY) {            return null        }        return Vector2(scaledMouseX.toFloat(), scaledMouseY.toFloat())    }        }