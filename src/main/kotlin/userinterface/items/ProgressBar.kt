package userinterface.itemsimport userinterface.UIColorimport userinterface.UniversalParameters.PROGRESS_BAR_BACKGROUNDimport userinterface.UniversalParameters.PROGRESS_BAR_COLORimport userinterface.UniversalParameters.PROGRESS_BAR_COMPLETED_COLORimport userinterface.UniversalParameters.PROGRESS_BAR_PAUSED_COLORimport userinterface.items.backgrounds.Backgroundimport userinterface.items.backgrounds.ColoredBackgroundimport userinterface.layout.constraints.ConstraintDirectionimport userinterface.layout.constraints.ConstraintSetimport userinterface.layout.constraints.constrainttypes.*class ProgressBar(id: String, constraints: ConstraintSet,                  private var progress: Float = 0.0f,                  background: Background = PROGRESS_BAR_BACKGROUND(),                  private val progressBarColor: UIColor = PROGRESS_BAR_COLOR(),                  private val progressBarPausedColor: UIColor = PROGRESS_BAR_PAUSED_COLOR(),                  private val progressBarCompletedColor: UIColor = PROGRESS_BAR_COMPLETED_COLOR()) : Item(id, constraints, background) {        private var paused = false    private var completed = false        init {        val progressBarConstraints = ConstraintSet(            CenterConstraint(ConstraintDirection.VERTICAL),            PixelConstraint(ConstraintDirection.TO_LEFT),            RelativeConstraint(ConstraintDirection.VERTICAL, 1.0f),            RelativeConstraint(ConstraintDirection.HORIZONTAL, progress)        )                add(Item("${id}_progress_bar", progressBarConstraints, ColoredBackground(progressBarColor, background.cornerRadius)))    }        fun setProgress(newProgress: Float) {        progress = newProgress        if (progress >= 1.0f) {            progress = 1.0f        }        if (progress < 0.0f) {            progress = 0.0f        }                val progressBarColorItem = findById("${id}_progress_bar") ?: return        progressBarColorItem.updateConstraint(ConstraintType.RELATIVE, ConstraintDirection.HORIZONTAL, progress)        progressBarColorItem.position(this)               if (!completed && progress == 1.0f) {            completed = true            (progressBarColorItem.background as ColoredBackground).color = progressBarCompletedColor.color        }        if (completed && progress < 1.0f) {            completed = false            (progressBarColorItem.background as ColoredBackground).color = progressBarColor.color        }    }        fun getProgress() = progress        fun pause() {        if (!completed) {            paused = true            val progressBarColor = findById("${id}_progress_bar") ?: return            (progressBarColor.background as ColoredBackground).color = progressBarPausedColor.color        }    }        fun resume() {        if (!completed) {            paused = false            val progressBarColorItem = findById("${id}_progress_bar") ?: return            (progressBarColorItem.background as ColoredBackground).color = progressBarColor.color        }    }        fun isPaused() = paused}