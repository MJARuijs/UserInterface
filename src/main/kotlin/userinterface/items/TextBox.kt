package userinterface.itemsimport graphics.shaders.ShaderProgramimport math.Colorimport userinterface.MovableUIContainerimport userinterface.UIColorimport userinterface.UniversalParametersimport userinterface.items.backgrounds.Backgroundimport userinterface.layout.constraints.ConstraintSetimport userinterface.text.Textimport userinterface.text.font.Fontclass TextBox(id: String, constraints: ConstraintSet, private val textString: String, private val color: Color, private val font: Font, private val aspectRatio: Float, background: Background = UniversalParameters.TEXTBOX_BACKGROUND()) : Item(id, constraints, background) {    constructor(id: String, constraints: ConstraintSet, textString: String, color: UIColor, font: Font, aspectRatio: Float, background: Background = UniversalParameters.TEXTBOX_BACKGROUND()) : this(id, constraints, textString, color.color, font, aspectRatio, background)        private lateinit var text: Text        override fun draw(shaderProgram: ShaderProgram, iconProgram: ShaderProgram, textProgram: ShaderProgram, aspectRatio: Float, parent: MovableUIContainer?) {        super.draw(shaderProgram, iconProgram, textProgram, aspectRatio, parent)        textProgram.start()        text.draw(textProgram, aspectRatio)        shaderProgram.start()    }        override fun position(parent: MovableUIContainer?, duration: Float) {        super.position(parent, duration)        val maxLength = getScale().x        text = Text(textString, 1.0f, maxLength, font, color, aspectRatio, scale = 2f)        text.translation = getTranslation()//        println(getScale())    }}