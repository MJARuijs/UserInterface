package userinterface.itemsimport graphics.shaders.ShaderProgramimport math.Colorimport math.vectors.Vector2import userinterface.MovableUIContainerimport userinterface.UIContainerimport userinterface.UniversalParametersimport userinterface.items.backgrounds.Backgroundimport userinterface.layout.constraints.ConstraintSetimport userinterface.text.Textimport userinterface.text.font.Fontclass TextBox(id: String, constraints: ConstraintSet, private val textString: String, private val aspectRatio: Float, var size: Float, background: Background = UniversalParameters.TEXTBOX_BACKGROUND(), private val color: Color = UniversalParameters.TEXT_COLOR().color, private val font: Font = UniversalParameters.arialFont) : Item(id, constraints, background) {        private lateinit var text: Text        override fun draw(shaderProgram: ShaderProgram, iconProgram: ShaderProgram, textProgram: ShaderProgram, aspectRatio: Float, parent: MovableUIContainer?) {        super.draw(shaderProgram, iconProgram, textProgram, aspectRatio, parent)        textProgram.start()        text.draw(textProgram, aspectRatio)        shaderProgram.start()    }        override fun translate(translation: Vector2) {        super.translate(translation)        text.translation += translation    }        override fun position(parent: UIContainer?, duration: Float) {        super.position(parent, duration)        val maxLength = getScale().x        text = Text(textString, 1f, maxLength, font, color, aspectRatio, scale = size)        text.translation = getTranslation()    }}