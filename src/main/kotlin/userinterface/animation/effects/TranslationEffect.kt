package userinterface.animation.effectsimport math.vectors.Vector2import userinterface.UniversalParameters.ANIMATION_DURATIONimport userinterface.animation.TransitionTypeimport userinterface.animation.XTransitionAnimationimport userinterface.animation.YTransitionAnimationimport userinterface.items.Itemclass TranslationEffect(private val xTranslation: Float, private val yTranslation: Float, duration: Float = ANIMATION_DURATION) : Effect(duration) {        constructor(translation: Vector2, duration: Float = ANIMATION_DURATION) : this(translation.x, translation.y, duration)        override fun applyOn(item: Item) {        if (xTranslation != 0.0f) {            item.animator += XTransitionAnimation(duration, xTranslation, item, TransitionType.MOVEMENT)        }        if (yTranslation != 0.0f) {            item.animator += YTransitionAnimation(duration, yTranslation, item, TransitionType.MOVEMENT)        }    }        override fun removeFrom(item: Item) {        if (xTranslation != 0.0f) {            item.animator += XTransitionAnimation(duration, -xTranslation, item, TransitionType.MOVEMENT)        }        if (yTranslation != 0.0f) {            item.animator += YTransitionAnimation(duration, -yTranslation, item, TransitionType.MOVEMENT)        }    }}