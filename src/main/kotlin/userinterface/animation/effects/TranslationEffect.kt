package userinterface.animation.effectsimport math.vectors.Vector2import userinterface.UniversalParameters.ANIMATION_DURATIONimport userinterface.animation.Animationimport userinterface.animation.animationtypes.TransitionTypeimport userinterface.animation.XTransitionAnimationimport userinterface.animation.YTransitionAnimationimport userinterface.items.Itemclass TranslationEffect(private val xTranslation: Float, private val yTranslation: Float, duration: Float = ANIMATION_DURATION) : Effect(duration) {        constructor(translation: Vector2, duration: Float = ANIMATION_DURATION) : this(translation.x, translation.y, duration)        override fun applyOn(item: Item): ArrayList<Animation> {        val animations = ArrayList<Animation>()                if (xTranslation != 0.0f) {            animations += XTransitionAnimation(duration, item, item.basePosition.x + xTranslation, TransitionType.PLACEMENT)        }                if (yTranslation != 0.0f) {            animations += YTransitionAnimation(duration, item, item.basePosition.y + yTranslation, TransitionType.PLACEMENT)        }        return animations    }        override fun removeFrom(item: Item): ArrayList<Animation> {        val animations = ArrayList<Animation>()            if (xTranslation != 0.0f) {            animations += XTransitionAnimation(duration, item, item.basePosition.x, TransitionType.PLACEMENT)        }        if (yTranslation != 0.0f) {            animations += YTransitionAnimation(duration, item, item.basePosition.y, TransitionType.PLACEMENT)        }        return animations    }}